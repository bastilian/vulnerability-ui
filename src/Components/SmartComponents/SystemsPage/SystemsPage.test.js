import SystemsPage from './SystemsPage';
import { render, screen, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { useDispatch, useSelector } from 'react-redux';
import TestWrapper from '../../../Utilities/TestWrapper';
import { entitiesInitialState, initialState } from '../../../Store/Reducers/SystemsPageStore';
import configureStore from 'redux-mock-store';

jest.mock('../../../Helpers/Hooks', () => ({
    ...jest.requireActual('../../../Helpers/Hooks'),
    useRbac: () => [[true, true, true, true], false]
}));

jest.mock("react-redux", () => ({
    ...jest.requireActual("react-redux"),
    useDispatch: jest.fn(),
    useSelector: jest.fn()
}));

jest.mock('@unleash/proxy-client-react', () => ( {
    ...jest.requireActual('@unleash/proxy-client-react'),
    useFlag: () => true, 
    useFlagsStatus: () => ({ flagsReady: true })
}));

const customMiddleWare = store => next => action => {
    useSelector.mockImplementation(callback => {
        return callback({ SystemsPageStore: initialState, entities: entitiesInitialState });
    });
    next(action);
};

const mockStore = configureStore([customMiddleWare]);
const store = mockStore({ SystemsPageStore: initialState, entities: entitiesInitialState });

describe('SystemsPage', () => {
    beforeEach(() => {  
        useSelector.mockImplementation(callback => {
            return callback({ SystemsPageStore: initialState, entities: entitiesInitialState });
        });
        useDispatch.mockReturnValue(jest.fn());
    });
    
    afterEach(() => {
        useSelector.mockClear();
        store.clearActions();
    });

    it('should call fetchData function', async () => {
        render(
            <TestWrapper store={ store }>
                <SystemsPage />
            </TestWrapper>
        );

        await waitFor(() => {
            expect(
                screen.getByRole('heading', {
                    name: /vulnerability systems/i
                })
            ).toBeVisible()
        });
    });
});
